/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode *head){
        ListNode *piche = nullptr;
    ListNode *aage=nullptr;
    while(head!=nullptr){
        aage=head->next;
        head->next=piche;
        piche=head;
        head=aage;
    }
    head=piche;

    return head;
    }
    ListNode* doubleIt(ListNode* head) {
    ListNode *r = reverse(head);
    ListNode *c = r;
    ListNode *prev = nullptr;
    int carry = 0;

    while (c != nullptr) {
        int sum = c->val * 2 + carry;
        carry = sum / 10;
        c->val = sum % 10;
        prev = c;
        c = c->next;
    }

    if (carry > 0) {
        ListNode* n = new ListNode(carry);
        prev->next = n;
    }

    return reverse(r);

    }
};
